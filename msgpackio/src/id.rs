

#[derive(Clone, Copy)]
pub enum MsgPackId 
{
	PosFixInt = 0x00, //0x00 - 0x7f positive fixint
	FixMap = 0x80, 		  //0x80 - 0x8f fixmap
	FixArray = 0x90, 	//0x90 - 0x9f fixarray
	FixStr =  0xa0, 	//0xa0 - 0xbf fixstr

	Nil = 0xc0,
	//0xc1 never used
	False = 0xc2,
	True = 0xc3,
	Bin8 = 0xc4,
	Bin16 = 0xc5,
	Bin32 = 0xc6,
	Ext8 = 0xc7,
	Ext16 = 0xc8,
	Ext32 = 0xc9,
	Float32 = 0xca,
	Float64 = 0xcb,
	UInt8 = 0xcc,
	UInt16 = 0xcd,
	UInt32 = 0xce,
	UInt64 = 0xcf,
	Int8 = 0xd0,
	Int16 = 0xd1,
	Int32 = 0xd2,
	Int64 = 0xd3,
	FixExt1 = 0xd4,
	FixExt2 = 0xd5,
	FixExt4 = 0xd6,
	FixExt8 = 0xd7,
	FixExt16 = 0xd8,
	Str8 = 0xd9,
	Str16 = 0xda,
	Str32 = 0xdb,
	Array16 = 0xdc,
	Array32 = 0xdd,
	Map16 = 0xde,
	Map32 = 0xdf,
	
	NegFixInt = 0xe0 //0xe0 - 0xff negative fixint
}

impl MsgPackId 
{
	#[inline]
	pub fn from_u8(b : u8) -> Option<MsgPackId>
	{
		match b
		{
			0x00...0x7f => Some(MsgPackId::PosFixInt),
			//0x80 - 0x8f fixmap
			//0x90 - 0x9f fixarray
			//0xa0 - 0xbf fixstr
			
			_ => None
		}
		
	}
}
